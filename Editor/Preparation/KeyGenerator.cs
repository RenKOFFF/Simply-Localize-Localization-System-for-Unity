using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;

namespace SimplyLocalize.Editor.Preparation
{
    public static class KeyGenerator
    {
        private const string _WARNING_HEADER =
            "//------------------------------------------------------------------------------\n" +
            "// <auto-generated>\n" +
            "// This code is generated from a template.\n" +
            "//\n" +
            "// Manual changes to this file may cause errors.\n" +
            "// Manual changes to this file will be overwritten when the code is regenerated.\n" +
            "// </auto-generated>\n" +
            "//------------------------------------------------------------------------------\n";

        private static IEnumerable<string> _enums = new List<string>();
        private static string _enumKeysName;

        public static void SetEnums(IEnumerable<string> enumEntries)
        {
            var enumHolders = enumEntries.ToList();
            if (enumHolders.Count == 0)
            {
                enumHolders.Add("None");
            }

            _enums = enumHolders;
        }

        public static void GenerateKeys()
        {
            LocalizationPreparation.PrepareFolders();
            
            GenerateEnumKeys();
            GenerateDictionaryKeys();
        }

        internal static string GetDataPath(string fileName)
        {
            var dictionaryDataPath = Path.Combine(LocalizationPreparation.GeneratedFolderPath, fileName);
            var dictionaryDataPathWithExtension = Path.ChangeExtension(dictionaryDataPath, LocalizationPreparation.FileExtensionCs);
            
            return dictionaryDataPathWithExtension;
        }

        private static void GenerateEnumKeys()
        {
            const string fileName = "LocalizationKey";
            _enumKeysName = fileName;
            
            var path = GetDataPath(fileName);

            using (var streamWriter = new StreamWriter(path))
            {
                streamWriter.WriteLine(_WARNING_HEADER);

                streamWriter.WriteLine("using UnityEngine;\n" +
                                       $"namespace {nameof(SimplyLocalize)}.Runtime.Data.Keys.Generated\n{{\n" +
                                       "\tpublic enum " + fileName + "\n" +
                                       "\t{");

                foreach (var @enum in _enums)
                {
                    streamWriter.WriteLine("\t\t" + @enum + ", ");
                }

                streamWriter.WriteLine("\t}");
                streamWriter.WriteLine("}");
            }

            AssetDatabase.Refresh();
        }

        private static void GenerateDictionaryKeys()
        {
            var fileName = "LocalizationKeys";
            var path = GetDataPath(fileName);
            
            using (var streamWriter = new StreamWriter(path))
            {
                streamWriter.WriteLine(_WARNING_HEADER);

                streamWriter.WriteLine(
                    $"using System.Collections.Generic;\n\n" +
                    $"namespace {nameof(SimplyLocalize)}.Runtime.Data.Keys.Generated\n" +
                    $"{{\n" +
                    $"\tpublic static class {fileName}\n" +
                    $"\t{{\n" +
                    $"\t\tpublic static readonly Dictionary<{_enumKeysName}, string> Keys = new()\n" +
                    $"\t\t{{"
                );

                var keys = _enums.Select(@enum =>
                    $"\t\t\t{{{_enumKeysName}.{@enum}, {_enumKeysName}.{@enum}.ToString()}},");
                streamWriter.Write(string.Join(Environment.NewLine, keys));

                streamWriter.WriteLine(
                    $"\n\t\t}};\n" +
                    $"\t}}\n" +
                    $"}}"
                );
            }

            AssetDatabase.Refresh();
        }
    }
}