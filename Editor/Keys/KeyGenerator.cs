#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using SimplyLocalize.Runtime.Data.Keys;
using SimplyLocalize.Runtime.Data.Keys.Generated;
using UnityEditor;

namespace SimplyLocalize.Editor.Keys
{
    public static class KeyGenerator
    {
        public static readonly string OldFilePathAndName = "Packages/com.renkoff.simply-localize/Runtime/Data/Keys/Generated";
        // public static readonly string OldFilePathAndName = "Assets/SimplyLocalize/Runtime/Data/Keys/Generated";
        
        private const string _WARNING_HEADER =
            "//------------------------------------------------------------------------------\n" +
            "// <auto-generated>\n" +
            "// This code is generated from a template.\n" +
            "//\n" +
            "// Manual changes to this file may cause errors.\n" +
            "// Manual changes to this file will be overwritten when the code is regenerated.\n" +
            "// </auto-generated>\n" +
            "//------------------------------------------------------------------------------\n";

        private static IEnumerable<EnumHolder> _enums;
        private static string _enumKeysName;

        private static readonly string FileExtension = ".cs";
        private static readonly string Meta = ".meta";
        
        private static string NewFilePathAndName => LocalizeEditor.NewKeysPath;
        
        public static void UpdateGenerationPath()
        {
            ClearOldFilesIfExist();
        }

        public static void SetEnums(IEnumerable<EnumHolder> enumEntries)
        {
            var enumHolders = enumEntries.ToList();
            if (enumHolders.Count == 0)
            {
                enumHolders.Add(new EnumHolder { Name = "None" });
            }

            _enums = enumHolders;
        }

        public static void GenerateEnumKeys()
        {
            const string fileName = nameof(LocalizationKey);
            _enumKeysName = fileName;
            
            var path = GetDataPath(fileName, true);

            using (var streamWriter = new StreamWriter(path))
            {
                streamWriter.WriteLine(_WARNING_HEADER);

                streamWriter.WriteLine("using UnityEngine;\n" +
                                       $"namespace {nameof(SimplyLocalize)}.Runtime.Data.Keys.Generated\n{{\n" +
                                       "\tpublic enum " + fileName + "\n" +
                                       "\t{");

                foreach (var e in _enums)
                {
                    var inspectorName = e.InspectorName;
                    var markedInspectorName = e.MarkAsFormattable
                        ? $"#F {(string.IsNullOrEmpty(inspectorName) ? e.Name : inspectorName)}"
                        : inspectorName;

                    if (string.IsNullOrEmpty(markedInspectorName))
                    {
                        streamWriter.WriteLine("\t\t" + e.Name + ", ");
                    }
                    else
                    {
                        streamWriter.WriteLine("\t\t" + $"[InspectorName(\"{markedInspectorName}\")] " + e.Name + ", ");
                    }
                }

                streamWriter.WriteLine("\t}");
                streamWriter.WriteLine("}");
            }

            AssetDatabase.Refresh();
        }

        public static void GenerateDictionaryKeys()
        {
            var fileName = nameof(LocalizationKeys);
            var path = GetDataPath(fileName, true);
            
            using (var streamWriter = new StreamWriter(path))
            {
                streamWriter.WriteLine(_WARNING_HEADER);

                streamWriter.WriteLine(
                    $"using System.Collections.Generic;\n\n" +
                    $"namespace {nameof(SimplyLocalize)}.Runtime.Data.Keys.Generated\n" +
                    $"{{\n" +
                    $"\tpublic static class {fileName}\n" +
                    $"\t{{\n" +
                    $"\t\tpublic static readonly Dictionary<{_enumKeysName}, string> Keys = new()\n" +
                    $"\t\t{{"
                );

                var keys = _enums.Select(e =>
                    $"\t\t\t{{{_enumKeysName}.{e.Name}, {_enumKeysName}.{e.Name}.ToString()}},");
                streamWriter.Write(string.Join(Environment.NewLine, keys));

                streamWriter.WriteLine(
                    $"\n\t\t}};\n" +
                    $"\t}}\n" +
                    $"}}"
                );
            }

            AssetDatabase.Refresh();
        }

        private static string GetDataPath(string fileName, bool isNewPath)
        {
            var dictionaryDataPath = Path.Combine(isNewPath ? NewFilePathAndName : OldFilePathAndName, fileName);
            var dictionaryDataPathWithExtension = Path.ChangeExtension(dictionaryDataPath, FileExtension);
            
            return dictionaryDataPathWithExtension;
        }

        public static void RemoveOldFilesIfNewExists()
        {
            var keysName = nameof(LocalizationKey);
            var dictionaryKeysName = nameof(LocalizationKeys);

            var newKeysPath = GetDataPath(keysName, true);
            var newDictionaryKeysPath = GetDataPath(dictionaryKeysName, true);
            
            if (File.Exists(newKeysPath) || File.Exists(newDictionaryKeysPath))
            {
                ClearOldFilesIfExist();
            }
        }

        private static void ClearOldFilesIfExist()
        {
            var keysName = nameof(LocalizationKey);
            var dictionaryKeysName = nameof(LocalizationKeys);

            var oldKeysPath = GetDataPath(keysName, false);
            var oldDictionaryKeysPath = GetDataPath(dictionaryKeysName, false);
            
            var oldKeysPathMeta = oldKeysPath + Meta;
            var oldDictionaryKeysPathMeta = oldDictionaryKeysPath + Meta;
            
            if (File.Exists(oldKeysPath))
            {
                File.Delete(oldKeysPath);

                if (File.Exists(oldKeysPathMeta))
                {
                    File.Delete(oldKeysPathMeta);
                }
            }

            if (File.Exists(oldDictionaryKeysPath))
            {
                File.Delete(oldDictionaryKeysPath);
                
                if (File.Exists(oldDictionaryKeysPathMeta))
                {
                    File.Delete(oldDictionaryKeysPathMeta);
                }
            }
            
            AssetDatabase.Refresh();
        }
    }
}
#endif